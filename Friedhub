-- FriedHub FF2 Ultimate - Part 1 (Main + GUI + Magnet)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local SETTINGS_KEY = "FriedHub_FF2_Settings"

local settings = {
    magnetEnabled = true,
    magnetRange = 28,
    autoCatch = true,
    freezeTech = false,
    freezeTime = 2,
    esp = true,
    ballPath = true,
    lowGraphics = false,
    longArms = false,
    angleEnhancer = true,
}

-- Load settings if saved
pcall(function()
    if readfile and isfile and isfile(SETTINGS_KEY) then
        local loaded = HttpService:JSONDecode(readfile(SETTINGS_KEY))
        for k,v in pairs(loaded) do settings[k] = v end
    end
end)

local function saveSettings()
    pcall(function()
        if writefile then
            writefile(SETTINGS_KEY, HttpService:JSONEncode(settings))
        end
    end)
end

-- GUI setup omitted here for brevity, but same as previous code (with tabs: Magnet, Misc, ESP)

-- Create toggles and sliders for magnet tab
-- (similar to previous GUI creation code)
-- ...

-- Now your magnet implementation:

local magRange = settings.magnetRange or 28
local delay = 0.05

local function getMid()
    local char = player.Character or player.CharacterAdded:Wait()
    local left = char:WaitForChild("CatchLeft")
    local right = char:WaitForChild("CatchRight")
    return left.Position:Lerp(right.Position, 0.5)
end

task.spawn(function()
    while true do
        if not settings.magnetEnabled then
            task.wait(delay)
        else
            local ball = workspace:FindFirstChild("Football") or workspace:FindFirstChildWhichIsA("Tool")
            if ball and ball:IsDescendantOf(workspace) then
                local mid = getMid()
                local dist = (ball.Position - mid).Magnitude

                if dist <= magRange then
                    local target = mid + Vector3.new(0, -1.1, -0.8)
                    ball.CFrame = CFrame.new(target)
                    ball.Velocity = Vector3.new(0,0,0)
                end
            end
            task.wait(delay)
        end
    end
end)-- FriedHub FF2 Ultimate - Part 2 (Ball Path Prediction)

local FootballLandingPredictions = true

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local Gravity = Vector3.new(0, -28, 0)
local SegmentCount = 160
local TimeStep = 0.035
local UseTrail = true

local function getTrajectory(startPos, velocity)
    local pos, vel = startPos, velocity
    local points = {pos}
    for _=1, SegmentCount do
        vel += Gravity * TimeStep
        pos += vel * TimeStep
        table.insert(points, pos)
        if pos.Y < 0 then break end
    end
    return points, pos
end

local function makeArc(points, color)
    local atts, beams = {}, {}
    for _, p in ipairs(points) do
        local a = Instance.new("Attachment")
        a.WorldPosition = p
        a.Parent = workspace.Terrain
        table.insert(atts, a)
    end
    for i=1, #atts-1 do
        local b = Instance.new("Beam")
        b.Attachment0 = atts[i]
        b.Attachment1 = atts[i+1]
        b.Width0 = 0.85
        b.Width1 = 0.85
        b.Color = ColorSequence.new(color)
        b.Transparency = NumberSequence.new(0.02)
        b.LightEmission = 0.5
        b.Segments = 2
        b.FaceCamera = true
        b.Parent = workspace.Terrain
        table.insert(beams, b)
    end
    return beams, atts
end

local function glowLoop(beams)
    task.spawn(function()
        local info = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
        for _, b in ipairs(beams) do
            TweenService:Create(b, info, {LightEmission = 2}):Play()
        end
        while beams[1] and beams[1].Parent do task.wait() end
    end)
end

local function ringMarker(pos, color)
    local ring = Instance.new("Part")
    ring.Anchored = true
    ring.CanCollide = false
    ring.Transparency = 1
    ring.Size = Vector3.new(1, 0.1, 1)
    ring.Position = pos + Vector3.new(0, 0.1, 0)
    ring.Material = Enum.Material.Neon
    ring.Color = color
    ring.Parent = workspace.Terrain

    local mesh = Instance.new("SpecialMesh", ring)
    mesh.MeshType = Enum.MeshType.Cylinder
    mesh.Scale = Vector3.new(0.1, 0.05, 0.1)

    TweenService:Create(mesh, TweenInfo.new(1), {Scale = Vector3.new(8, 0.05, 8)}):Play()
    TweenService:Create(ring, TweenInfo.new(1), {Transparency = 1}):Play()
    task.delay(1, function() ring:Destroy() end)
end

local function addTrail(part)
    local a0 = Instance.new("Attachment", part)
    local a1 = Instance.new("Attachment")
    a1.Parent = workspace.Terrain
    local beam = Instance.new("Beam")
    beam.Attachment0 = a0
    beam.Attachment1 = a1
    beam.Width0 = 0.4
    beam.Width1 = 0
    beam.LightEmission = 1
    beam.LightInfluence = 0
    beam.Segments = 2
    beam.Color = ColorSequence.new(Color3.fromRGB(255, 125, 0))
    beam.Transparency = NumberSequence.new(0,1)
    beam.FaceCamera = true
    beam.Parent = part

    local con
    con = RunService.Heartbeat:Connect(function()
        if part and part.Parent == workspace then
            a1.WorldPosition = part.Position - part.Velocity.Unit * 2
        else
            beam:Destroy()
            a0:Destroy()
            a1:Destroy()
            con:Disconnect()
        end
    end)
end

local function fadeOutBeams(beams, duration)
    task.spawn(function()
        local steps = 30
        for step=1, steps do
            local t = step/steps
            for _, b in ipairs(beams) do
                b.Transparency = NumberSequence.new(t)
            end
            task.wait(duration/steps)
        end
        for _, b in ipairs(beams) do
            b.Transparency = NumberSequence.new(1)
        end
    end)
end

workspace.ChildAdded:Connect(function(b)
    if b.Name == "Football" and b:IsA("BasePart") then
        task.wait()
        RunService.Heartbeat:Wait()
        local velocity = b.AssemblyLinearVelocity
        local color = Color3.fromRGB(255, 125, 0) -- Orange
        local points, landing = getTrajectory(b.Position, velocity)
        local beams, atts = makeArc(points, color)
        glowLoop(beams)
        ringMarker(landing, color)
        if UseTrail then addTrail(b) end

        local con
        con = RunService.Heartbeat:Connect(function()
            if b.Velocity.Magnitude < 1 then
                if FootballLandingPredictions then
                    fadeOutBeams(beams, 1)
                else
                    for _, beam in ipairs(beams) do
                        beam.Transparency = NumberSequence.new(1)
                    end
                end
                for _, a in ipairs(atts) do a:Destroy() end
                con:Disconnect()
            end
        end)

        repeat task.wait() until b.Parent ~= workspace
        for _, beam in ipairs(beams) do beam.Transparency = NumberSequence.new(1) end
        for _, a in ipairs(atts) do a:Destroy() end
    end
end)-- FriedHub FF2 Ultimate - Part 3 (Semi-Stealth Magnet)

local Players = game:GetService("Players")
local lp = Players.LocalPlayer

local magRange = 28 -- close enough for stealth
local delay = 0.05 -- smooth frame timing

local function getMid()
    local char = lp.Character or lp.CharacterAdded:Wait()
    local left = char:WaitForChild("CatchLeft")
    local right = char:WaitForChild("CatchRight")
    return left.Position:Lerp(right.Position, 0.5)
end

task.spawn(function()
    while true do
        local ball = workspace:FindFirstChild("Football") or workspace:FindFirstChildWhichIsA("Tool")
        if ball and ball:IsDescendantOf(workspace) then
            local mid = getMid()
            local dist = (ball.Position - mid).Magnitude

            if dist <= magRange then
                -- safe spot slightly in front, avoids body collision
                local target = mid + Vector3.new(0, -1.1, -0.8)
                ball.CFrame = CFrame.new(target)
                ball.Velocity = Vector3.zero
            end
        end
        task.wait(delay)
    end
end)
